package ru.nsu.pronin;

import java.util.List;

/**
 * Интерфейс для представления графа.
 * Граф может быть реализован различными способами, например, с использованием списка смежности
 * или матрицы смежности.
 */
public interface Graph {

    /**
     * Добавляет вершину в граф.
     *
     * @param vertex Вершина для добавления в граф.
     */
    void addVertex(Vertex vertex);

    /**
     * Удаляет вершину из графа.
     *
     * @param vertex Вершина для удаления из графа.
     */
    void removeVertex(Vertex vertex);

    /**
     * Добавляет ребро между двумя вершинами.
     *
     * @param from Начальная вершина (источник).
     * @param to Конечная вершина (назначение).
     */
    void addEdge(Vertex from, Vertex to);

    /**
     * Удаляет ребро между двумя вершинами.
     *
     * @param from Начальная вершина (источник).
     * @param to Конечная вершина (назначение).
     */
    void removeEdge(Vertex from, Vertex to);

    /**
     * Получает список соседей заданной вершины.
     *
     * @param vertex Вершина, для которой требуется получить список соседей.
     * @return Список соседей вершины.
     */
    List<Vertex> getNeighbors(Vertex vertex);

    /**
     * Выполняет топологическую сортировку графа.
     * Алгоритм топологической сортировки упорядочивает вершины графа в такой последовательности,
     * что для любого ребра (u → v) вершина u будет стоять перед вершиной v в отсортированном списке.
     * Если граф содержит цикл, метод может вернуть пустой список.
     *
     * @return Список вершин в топологическом порядке.
     */
    List<Vertex> topologicalSort();

    /**
     * Читает граф из файла.
     * Формат файла должен быть следующим:
     * - Сначала количество вершин (N).
     * - Далее имена вершин, по одному на строку.
     * - После этого следует список рёбер, каждое ребро представлено двумя индексами вершин.
     *
     * @param filename Имя файла для чтения.
     */
    void readFromFile(String filename);

    /**
     * Сравнивает текущий граф с другим объектом.
     * Графы считаются равными, если у них одинаковые вершины и рёбра.
     *
     * @param obj Объект для сравнения с текущим графом.
     * @return true, если графы одинаковы, иначе false.
     */
    boolean equals(Object obj);

    /**
     * Получает строковое представление графа.
     * Строка будет содержать информацию о вершинах графа и рёбрах, их соединяющих.
     *
     * @return Строковое представление графа.
     */
    String toString();
}
