package ru.nsu.pronin;

import java.util.PriorityQueue;

/**
 * –ö–ª–∞—Å—Å Warehouse (—Å–∫–ª–∞–¥) —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∫–ª–∞–¥–∞.
 */
public class Warehouse {
    final static int capacity = 30;
    static int currentStateCapacity = 0;
    final static PriorityQueue<Order> queueOfOrder = new GeneralQueueOfOrders().orders;

    /**
     * –ú–µ—Ç–æ–¥ isTherePlaceWareHouse –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.
     */
    public static boolean isTherePlaceWareHouse() {
        if (currentStateCapacity < capacity) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * –ú–µ—Ç–æ–¥ storageInTheWareHouse —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∫–ª–∞–¥–∞.
     *
     * @param element - –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –≤ –æ—á–µ—Ä–µ–¥—å —ç–ª–µ–º–µ–Ω—Ç.
     */
    public static synchronized void storageInTheWareHouse(Order element) {
        element.setState(" –∑–∞–∫–∞–∑ üçï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥ üè§ ");
        System.out.println(element.getId() + element.getState());
        queueOfOrder.add(element);
        currentStateCapacity++;
        queueOfOrder.notify(); // –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –¥–µ–ª–∞—é???
    }

    /**
     * –ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–∫–ª–∞–¥–∞.
     *
     * @return queueOfOrder - –æ—á–µ—Ä–µ–¥—å –∫–ª–∞—Å—Å–∞.
     */
    public static PriorityQueue<Order> getQueueOfOrder() {
        return queueOfOrder;
    }
}
