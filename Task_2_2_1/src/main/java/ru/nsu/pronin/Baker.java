package ru.nsu.pronin;

import java.util.PriorityQueue;

/**
 * –ö–ª–∞—Å—Å Baker —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –≤–∑—è—Ç–æ–≥–æ –ø–µ–∫–∞—Ä—è,
 * –∫–æ—Ç–æ—Ä—ã–π –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–æ—Ç–æ–∫–µ.
 * */
public class Baker {
    private PriorityQueue<Order> orders;
    private int id;
    private Boolean state;
    private int time;

    /**
    * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π –ø–µ–∫–∞—Ä—è.
     * @param id - –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–µ–∫–∞—Ä—è.
     * @param time - –≤—Ä–µ–º—è –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –ø–µ–∫–∞—Ä–µ–º –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
     * @param orders - –æ—á–µ—Ä–µ–¥—å –∑–∞–∫–∞–∑–æ–≤.
     * */
    Baker(int id, int time, PriorityQueue<Order> orders){
        this.id = id;
        this.orders = orders;
        this.state = false;
        this.time = time;
    }

    /**
     * –ú–µ—Ç–æ–¥ baker —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–≤–∞—Ä–æ–º
     * @throws InterruptedException –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
     * @return true - –ø–µ–∫–∞—Ä—å –∑–∞–Ω—è—Ç
     * @return false - –ø–µ–∫–∞—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω
     * */
    public  boolean  baker() throws InterruptedException {
        Order order;
        synchronized (orders) {
            if (orders.isEmpty()) {
                System.out.println("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ –ø–µ–∫–∞—Ä—å –æ—Ç–∫–∏—Å–∞–µ—Ç üí§üí§üí§");
                state = false;
                orders.wait();
            }
            order = orders.poll(); // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –≤–∑—è—Ç–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        }

        state = true;

        order.setState("–ì–æ—Ç–æ–≤–∏—Ç—Å—è  –ø–µ–∫–∞—Ä–µ–º üë®üèø‚Äçüç≥ ");
        System.out.println("–ó–∞–∫–∞–∑ üçï " + order.getId() + " " + order.getState() + " –Ω–æ–º–µ—Ä " + id);
        System.out.println("–≥–æ—Ç–æ–≤–ª—é –∑–∞–∫–∞–∑ üçï " + order.getId());
        Thread.sleep(time);
        System.out.println("–ó–∞–∫–∞–∑ üçï " + order.getId() + " –≥–æ—Ç–æ–≤");
        synchronized (Warehouse.queueOfOrder) {
            if (Warehouse.isTherePlaceWareHouse()) {
                Warehouse.storageInTheWareHouse(order);
            } else {
                while (!Warehouse.isTherePlaceWareHouse()) {
                    System.out.println("–°–∫–ª–∞–¥ –ø–æ–ª–æ–Ω, –ø–µ–∫–∞—Ä—å –∂–¥–µ—Ç... üïê ");
                    Thread.sleep(1000);
                }
                System.out.println("–ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –∏ –ø–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ —Å–∫–ª–∞–¥ üéâüéâüéâ");
            }
        }
        state = false;
        return true; // –µ—Å–ª–∏ –ø–µ–∫–∞—Ä—å —Å–≤–æ–±–æ–¥–µ–Ω, —Ç–æ –µ–º—É –Ω–∞–¥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É
    }
}
