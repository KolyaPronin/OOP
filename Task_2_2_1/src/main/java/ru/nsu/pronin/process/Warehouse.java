package ru.nsu.pronin.process;

import ru.nsu.pronin.data.Order;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

/**
 * –ö–ª–∞—Å—Å Warehouse (—Å–∫–ª–∞–¥) —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∫–ª–∞–¥–∞.
 */
public class Warehouse {
    private static final int capacity = 30;
    private static int currentStateCapacity = 0;
    private static final PriorityQueue<Order> queueOfOrder = new PriorityQueue<>(Comparator.comparingInt(Order::getId));

    /**
     * –ú–µ—Ç–æ–¥ isTherePlaceWareHouse –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ.
     */
    public static synchronized boolean isTherePlaceWareHouse() {
        return currentStateCapacity < capacity;
    }

    /**
     * –ú–µ—Ç–æ–¥ storageInTheWareHouse —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∫–ª–∞–¥–∞.
     *
     * @param element - –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –≤ –æ—á–µ—Ä–µ–¥—å —ç–ª–µ–º–µ–Ω—Ç.
     */
    public static synchronized void storeInWareHouse(Order element) {
        element.setState(" –∑–∞–∫–∞–∑ üçï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥ üè§ ");
        System.out.println(element.getId() + element.getState());
        queueOfOrder.add(element);
        currentStateCapacity++;
        Warehouse.class.notifyAll();
    }

    public static synchronized void placeOrder(Order order) throws InterruptedException {
        if (isTherePlaceWareHouse()) {
            storeInWareHouse(order);
        } else {
            while (!isTherePlaceWareHouse()) {
                System.out.println("–°–∫–ª–∞–¥ –ø–æ–ª–æ–Ω, –ø–µ–∫–∞—Ä—å –∂–¥–µ—Ç... üïê ");
                Thread.sleep(1000);
            }
            System.out.println("–ú–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –∏ –ø–∏—Ü—Ü–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ —Å–∫–ª–∞–¥ üéâüéâüéâ");
        }
    }

    public static synchronized List<Order> waitOrder(int bagCapacity) throws InterruptedException {
        PizzeriaDispatcher.checkOpen();
        while (queueOfOrder.isEmpty()) {
            Warehouse.class.wait();
        }
        List<Order> bag = new ArrayList<>();
        for (int i = 0; i < bagCapacity; i++) {
            Order order = Warehouse.takeOrder();
            if (order == null) {
                break;
            }
            bag.add(order);
        }
        return bag;
    }

    public static PriorityQueue<Order> getQueueOfOrder() { // ??
        return queueOfOrder;
    }


    private static Order takeOrder() throws InterruptedException {
        if (Warehouse.currentStateCapacity != 0) {
            Warehouse.currentStateCapacity--;
            Order order;
            while ((order = queueOfOrder.poll()) == null) {
                Warehouse.class.wait();
            }
            return order;
        } else {
            System.out.println("—Å–∫–ª–∞–¥ –ø—É—Å—Ç–æ–π");
            return null;
        }
    }
}
