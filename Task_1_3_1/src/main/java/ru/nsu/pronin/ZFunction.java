package ru.nsu.pronin;

/**
 * Класс для вычисления Z-функции строки.
 * <p>
 * Z-функция строки — это массив, где каждый элемент на позиции i
 * показывает наибольшую длину префикса строки, который совпадает с суффиксом,
 * начинающимся с позиции i.
 * </p>
 */
public class ZFunction {

    /**
     * Вычисляет Z-функцию для переданной строки.
     * <p>
     * Z-функция строится с помощью алгоритма, который за время O(n)
     * вычисляет массив Z-значений для строки. Каждый элемент массива Z
     * указывает на длину максимального префикса строки, совпадающего с суффиксом,
     * начиная с данного индекса.
     * </p>
     *
     * @param array строка, для которой нужно вычислить Z-функцию
     * @return массив Z-функции, где каждый элемент представляет длину максимального
     *         префикса, совпадающего с суффиксом начиная с индекса i
     */
    public int[] Zfunk(String array) {
        // Преобразуем строку в массив символов
        char[] charArray = array.toCharArray();
        int len = charArray.length;
        int[] Zarray = new int[len];

        // Алгоритм для вычисления Z-функции
        for (int i = 1, l = 0, r = 0; i < len; i++) {
            if (i <= r) {
                // Если i в пределах правого интервала, используем предыдущие вычисления
                Zarray[i] = Math.min(r - i + 1, Zarray[i - l]);
            }
            // Пробегаем по строке, расширяя текущий префикс
            while (i + Zarray[i] < len && charArray[Zarray[i]] == charArray[i + Zarray[i]]) {
                Zarray[i]++;
            }

            // Если нашли более длинный суффикс, обновляем границы интервала
            if (i + Zarray[i] - 1 > r) {
                r = i + Zarray[i] - 1;
                l = i;
            }
        }

        return Zarray;
    }
}
